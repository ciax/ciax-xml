#!/bin/bash
# Use sql file generated by log2sql
#alias devsim
kilpid(){
    pid=$(grep -s . $pidfile) && { kill $pid; :> $pidfile; }
}
server(){
    kilpid
    # To keep alive an exec command, it should be first item
    socat exec:"$0 -" udp-recvfrom:8888,reuseaddr,fork &
    echo $! > $pidfile
    exit
}
# sql commands
maxtime(){
    sqlite3 $sqlfile <<EOF
select max(time) from stream;
EOF
}
mintime(){
    sqlite3 $sqlfile <<EOF
select min(time) from stream;
EOF
}
nexttime(){
    sqlite3 $sqlfile <<EOF | grep .
select min(time) from stream
 where time > ${time:=0}
 ${site:+ and id == '$site'}
 ${input:+and snd == '$input'}
;
EOF
}
fields(){
    sqlite3 -line $sqlfile <<EOF | tr -d ' '
select * from stream
 where time == $time; 
EOF
}
# main
next(){
    ns=$(now)
    time=$(nexttime) && {
        leadtime=$(echo "$(now)-$ns"|bc)
        return
    }
    warn "== Rewinded =="
    time=$(nexttime) || {
        warn "== Not found =="
        return 1
    }
}
setvar(){
    while read line; do
        eval "$line"
    done < <(fields)
}
# verbose display
progress(){
    par=$(echo "($time-$min)/$len*100"|bc -l)
    msec=$(echo "$leadtime*1000"|bc)
    warn "  "$(printf "Found at %s (%.2f%%) in %.2f msec" $time $par $msec )
}
waitdur(){
    rest=$(printf "%.3f" $(echo "$dur-$leadtime"|bc -l))
    sleep $rest
    warn "  Slept $rest/$dur"
}
now(){ date +%s.%N; }
warn(){ echo "DEVSIM:$*" > /dev/stderr; }
#########################
pidfile="$HOME/.var/run/devsim.pid"
mkdir -p $HOME/.var/run
[ "$1" ] ||{  echo "Usage:${0##*/} (-d) [site]";kilpid;exit 1; }
[ "$1" = -d ] && server
[ "$1" = - ] || site=$1
time=0
sqlfile="$HOME/.var/log/stream.sq3"
min=$(mintime)
max=$(maxtime)
len=$(( $max - $min ))
warn "== Init =="
while : ; do
    warn "  Ready"
    input=$(input64)
    warn "  Search for $input"
    next || continue
    setvar
    progress
    waitdur
    echo -n $rcv|base64 -d
done

