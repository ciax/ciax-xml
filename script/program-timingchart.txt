 @sv_stat flags
   :busy   : While command issuing (status updated when it comes down)
   :action : According to command name (type 'action')
   :event  : According to combination of @event and @sv_stat (moving)
 @event variables
   :active : Array of event ids which meet criteria
   :exec   : Cmd queue which contains cmds issued as event
   :block  : Array of cmds (units) which are blocked during event
   :int    : List of interrupt cmds which is effectie during event

 Timing chart in active mode
   busy   :__--__--__--==__--___
   action :___---_______________
   active :_____------__----____
   event  :_____-------------___

 Timing chart in update mode
   busy   :__--__
   action :______
   active :======
   event  :======

 Trigger Table
   activ|event| mark| @sv_stat
     o  |  o  |  e  | cmt
     x  |  o  |  e  | event:down
     o  |  x  |  s  | event:up
     x  |  x  |  -  | cmt

 Prompt Flag Driver(who drives the flag)
    item  | at | who
   --------------------------------------
    busy  | up | App::Buffer#recv
    busy  | dw | App::Buffer#cmt
   action | up | App::Buffer#recv(@busy-up)
   action | dw | App::Buffer#recv/Wat::Action#action
    event | up | Wat::Action#action
    event | dw | Wat::Action#action

 Dependency(active mode)
   Shell: App command -> send to Buffer
   Buf  : Buffer#recv
              [busy-up,action-dw]
              re-order cmmand
              [queue fill up, action-up]
              exec Frm commands
                frame.conv <- response(stream)
                field.conv
              cmt
          Buffer#cmt
            [queue empty, busy-dw]
            status.cmt
          Status#cmt
            status.conv (from field)
            event.cmt
          Event#cmt
            event.conv (from status)
