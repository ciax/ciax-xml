#### Coding conventions ####

## Source comment legend
 #@ : instance variable list
 #@< : parent's var ('<' is added as the number of ancestor generaton).
       parenthetic var is not used in the class.
       * is added for exported var.

## Naming rule recommendation
 # general
  - method name : verb, verbal noun (~ing) or snake case (verb_noun) to privent to mix up with local var.
  - private method name (mixin module)
    = shared among inherited classes : under bar prefix to distinct with system method or local var. (_name)
    = used only its own class : under bar prefix and suffix to distinct with private shared method.  (_name_)
  - local var name : abbrev word (as short as possible < 4 letter).
    (i.e. i,j,k,idx,grp,key(k),hsh(h),ary(a),val(v)...).
  - DB key which contains Hash or Array : Symbol. Other keys are String.
  - Status key which could be written out to a file : String.
 #local var
   args: Command(Array) [cmd,par,par...].
   cid: Command ID(String) "cmd:par:par".
   bat: Batch Array of Commands(Array of Array) [args,args,...].
   f*: Associated with Frm (i.e. fargs, fstat ..).
   a*: Associated with App (i.e. aargs, astat ..).
 #block rerutn value
   set return value to local var 'res' at the end of block if it is expressly provided.

## Specialized method naming (Container objects)
  - list()   [list_*] : returns Hash or Array.
  - view()   [view_*] : returns String.
  - upd()    [upd_*] : Update for triggering execute the implicit procs (upper layer). returns self.
  - set(val) [store_*] : stores value to self, returns self.
  - get(id)  [fetch_*] : fetch value from existent key/index, which can includes cache access or data generation.
  - add(par) [add_*] : generate and store new element with parameter, returns self.
  - gen(par) [gen_*] : generate and store new element with parameter, returns generated object.
 #For Array
  - append(obj) [append_*] : stores and returns object.
 #For Hash
  - put(key,val)  [put_*] : stores key and value, returns value.
  - put(key,&val) [put_*] : stores key and value if key is not exist, returns value.      
  - rep(key,val)  [rep_*] : replace value to existent key and returns value.
